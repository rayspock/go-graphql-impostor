package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
)

// CreateTodo is the resolver for the createTodo field.
func (r *myMutationResolver) CreateTodo(ctx context.Context, todo TodoInput) (*Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *myMutationResolver) UpdateTodo(ctx context.Context, id string, changes map[string]interface{}) (*Todo, error) {
	panic(fmt.Errorf("not implemented: UpdateTodo - updateTodo"))
}

// Todo is the resolver for the todo field.
func (r *myQueryResolver) Todo(ctx context.Context, id string) (*Todo, error) {
	panic(fmt.Errorf("not implemented: Todo - todo"))
}

// LastTodo is the resolver for the lastTodo field.
func (r *myQueryResolver) LastTodo(ctx context.Context) (*Todo, error) {
	panic(fmt.Errorf("not implemented: LastTodo - lastTodo"))
}

// Todos is the resolver for the todos field.
func (r *myQueryResolver) Todos(ctx context.Context) ([]*Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// MyMutation returns MyMutationResolver implementation.
func (r *Resolver) MyMutation() MyMutationResolver { return &myMutationResolver{r} }

// MyQuery returns MyQueryResolver implementation.
func (r *Resolver) MyQuery() MyQueryResolver { return &myQueryResolver{r} }

type myMutationResolver struct{ *Resolver }
type myQueryResolver struct{ *Resolver }
